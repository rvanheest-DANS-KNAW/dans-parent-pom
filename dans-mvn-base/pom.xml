<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2018 DANS - Data Archiving and Networked Services (info@dans.knaw.nl)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>nl.knaw.dans.shared</groupId>
    <artifactId>dans-mvn-base</artifactId>
    <name>DANS Maven Project Basic Settings</name>
    <version>5.0.1-SNAPSHOT</version>
    <packaging>pom</packaging>
    <description>
        Parent project for all DANS Maven-based projects.
    </description>
    <inceptionYear>2018</inceptionYear>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- wrapped system property maven.build.timestamp in own property as work-around for
         https://issues.apache.org/jira/browse/MRESOURCES-99. This should actually be fixed since
         Maven 3.0.0, so prefer the use of maven.build.timestamp over this custom property.
         -->
        <timestamp>${maven.build.timestamp}</timestamp>

        <maven.build.timestamp.format>yyyy-MM-dd HH:mm</maven.build.timestamp.format>
        <license-maven-plugin.version>3.0</license-maven-plugin.version>

        <!-- Releasing to the DANS Maven repository -->
        <maven-release-plugin.version>2.5.3</maven-release-plugin.version>

        <snapshot-repository>http://nexus.dans.knaw.nl/repository/maven-snapshots</snapshot-repository>
        <release-repository>http://nexus.dans.knaw.nl/repository/maven-releases</release-repository>
    </properties>
    <scm>
        <developerConnection>scm:git:https://github.com/DANS-KNAW/${project.artifactId}</developerConnection>
        <tag>HEAD</tag>
    </scm>
    <distributionManagement>
        <!-- Credentials for server are defined in ~/.m2/settings.xml -->
        <snapshotRepository>
            <id>nexus-snapshots</id>
            <!-- Final slash is important for Nexus ! -->
            <url>${snapshot-repository}/</url>
        </snapshotRepository>
        <repository>
            <id>nexus-releases</id>
            <!-- Final slash is important for Nexus ! -->
            <url>${release-repository}/</url>
        </repository>
    </distributionManagement>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>3.0.0-M1</version>
            </plugin>
            <plugin>
                <!--
                We rely on the maven-deploy-plugin that is included by default.
                You can use it on its own to deploy a snapshot, but maven-release-plugin
                also uses it to perform the deploy of the release when calling
                mvn release:perform.
                -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>${maven-release-plugin.version}</version>
                <configuration>
                    <tagNameFormat>v@{project.version}</tagNameFormat>
                    <autoVersionSubmodules>true</autoVersionSubmodules>
                    <pushChanges>true</pushChanges>
                </configuration>
            </plugin>
            <plugin>
                <!--
                    There's a bit of a chicken-and-egg problem here. We cannot use the use the apache2.txt from
                    dans-mvn-build-resources here, as this project depends on dans-mvn-base. To avoid the circular
                    dependency we have a minimal amount of code duplication here. Note that this minimal plug-in
                    configuration is overridden in dans-mvn-build-resources and dans-mvn-plugin-defaults.
                -->
                <groupId>com.mycila</groupId>
                <artifactId>license-maven-plugin</artifactId>
                <version>${license-maven-plugin.version}</version>
                <configuration>
                    <header>src/main/resources/apache2.txt</header>
                    <properties>
                        <owner>DANS - Data Archiving and Networked Services</owner>
                        <email>info@dans.knaw.nl</email>
                    </properties>
                    <excludes>
                        <exclude>LICENSE</exclude>
                    </excludes>
                </configuration>
                <executions>
                    <execution>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
